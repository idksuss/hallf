repeat wait() until game:IsLoaded()

repeat wait() until 
    game.Workspace:FindFirstChild("Objects") and
    game.Workspace.Objects:FindFirstChild("Characters") and
    game.Workspace.Objects.Characters:FindFirstChild(game.Players.LocalPlayer.Name) and
    game.Players.LocalPlayer:FindFirstChild("ReplicatedData") and
    game:GetService("ReplicatedStorage")

    if game:GetService("CoreGui"):FindFirstChild("ScreenGui") then
        game:GetService("CoreGui").ScreenGui:Destroy()
    end

--Load library
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

--Create Main Window
local Window = Rayfield:CreateWindow({
   Name = "Skull Hub - Jujutsu Infinite",
   LoadingTitle = "Skull Hub",
   LoadingSubtitle = "by hungquan99",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = false,
      FolderName = "Skull Hub",
      FileName = "JuInfinite"
   },

   Discord = {
      Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "NxHT2rSynR", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = false -- Set this to false to make them join the discord every time they load it up
   },
      
   KeySystem = false,
   KeySettings = {
      Title = "Skull Hub",
      Subtitle = "🔑 Key System",
      Note = "Join discord https://discord.gg/NxHT2rSynR to get key.",
      Key = {"hungquan99"}
   }
})


--IDK
local bb = game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
    bb:CaptureController()
    bb:ClickButton2(Vector2.new())
end)

local PlaceID = game.PlaceId
local AllIDs = {}
local foundAnything = ""
local actualHour = os.date("!*t").hour
local Deleted = false
local File = pcall(function()
    AllIDs = game:GetService('HttpService'):JSONDecode(readfile("NotSameServers.json"))
end)
if not File then
    table.insert(AllIDs, actualHour)
    writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
end

function TPReturner1()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end

    local ID = ""
    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end

    local lowestPlayers = math.huge
    local bestServerID = nil

    for i, v in pairs(Site.data) do
        local Possible = true
        ID = tostring(v.id)
        if tonumber(v.maxPlayers) > tonumber(v.playing) then
            for _, Existing in pairs(AllIDs) do
                if ID == tostring(Existing) then
                    Possible = false
                    break
                end
            end

            if Possible then
                local playersInServer = tonumber(v.playing)
                if playersInServer < lowestPlayers then
                    lowestPlayers = playersInServer
                    bestServerID = ID
                end
            end
        end
    end

    if bestServerID then
        table.insert(AllIDs, bestServerID)
        pcall(function()
            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
            wait()
            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, bestServerID, game.Players.LocalPlayer)
        end)
        wait(4)
    end
end

function Teleport1()
    while wait() do
        pcall(function()
            TPReturner1()
            if foundAnything ~= "" then
                TPReturner1()
            end
        end)
    end
end

function TPReturner()
    local Site
    if foundAnything == "" then
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100'))
    else
        Site = game.HttpService:JSONDecode(game:HttpGet('https://games.roblox.com/v1/games/' .. PlaceID .. '/servers/Public?sortOrder=Asc&limit=100&cursor=' .. foundAnything))
    end

    if Site.nextPageCursor and Site.nextPageCursor ~= "null" and Site.nextPageCursor ~= nil then
        foundAnything = Site.nextPageCursor
    end

    local serverID = nil
    for _, v in pairs(Site.data) do
        serverID = tostring(v.id) 
        break
    end

    if serverID then
        table.insert(AllIDs, serverID)
        pcall(function()
            writefile("NotSameServers.json", game:GetService('HttpService'):JSONEncode(AllIDs))
            wait()
            game:GetService("TeleportService"):TeleportToPlaceInstance(PlaceID, serverID, game.Players.LocalPlayer)
        end)
        wait(4)
    end
end

function Teleport()
    while wait() do
        pcall(function()
            TPReturner()
            if foundAnything ~= "" then
                TPReturner()
            end
        end)
    end
end

local function teleportToNextItem()
    while getgenv().autotalisma do
        local items = workspace.Objects.Drops:GetChildren()
        local foundCollect = false

        for _, item in pairs(items) do
            local collectPart = item:FindFirstChild("Collect")

            if collectPart then
                foundCollect = true
                local itemRoot = item:FindFirstChild("Root")

                if itemRoot then
                    local player = game.Players.LocalPlayer
                    local humanoidRootPart = workspace.Objects.Characters[player.Name].HumanoidRootPart
                    humanoidRootPart.CFrame = itemRoot.CFrame
                    wait(0.5)

                    for i, v in pairs(item:GetDescendants()) do
                        if v:IsA("ProximityPrompt") then 
                            fireproximityprompt(v, 1, true)
                        end 
                    end
                end
            end
        end

        if not foundCollect then
            wait(1)
        end
    end
end

local function activateChest()
    local chest = workspace:FindFirstChild("Objects") and workspace.Objects:FindFirstChild("Drops") and workspace.Objects.Drops:FindFirstChild("Chest")
    
    if chest then
        for i, v in pairs(chest:GetDescendants()) do
            if v:IsA("ProximityPrompt") then
                fireproximityprompt(v, 1, true)
            end
        end
        return true
    end
    return false
end

local function checkLootAndChest()
    local player = game:GetService("Players").LocalPlayer
    local loot = player.PlayerGui:FindFirstChild("Loot")
    
    if loot and loot.Enabled then
        local button = player.PlayerGui.Loot.Frame.Flip
        game:GetService("GuiService").SelectedObject = button
        game:GetService("GuiService").SelectedObject = button
        game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Return, false, game)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.Return, false, game)
    else
        activateChest()
    end
end

--Tabs
local ma = Window:CreateTab("Farm", 137212456917215)
local misc = Window:CreateTab("Misc", 137212456917215)
local setting = Window:CreateTab("UI Settings", 137212456917215)


--Farm
local Section = ma:CreateSection("Auto Farm Quests")

local LoopSlider = ma:CreateSlider({
    Name = "Loop Delay (Secs)",
    Range = {1, 120},
    Increment = 1,
    Suffix = "Secs",
    CurrentValue = 20,
    Flag = "Loopslider",
    Callback = function(Value)
        getgenv().WaitTime = Value
    end,
})

getgenv().WaitTime = 20

local aqtoggle = ma:CreateToggle({
    Name = "Auto Quest (Blatant)",
    CurrentValue = false,
    Flag = "aquest",
    Callback = function(Value)
        if Value then
            getgenv().AutoFarm1 = true
            local processing = false
    
            game:GetService("RunService").Heartbeat:Connect(function()
                if getgenv().AutoFarm1 and not processing then
                    processing = true
    
                    local localPlayer = game.Players.LocalPlayer
                    local ohTable1 = {
                        ["type"] = "Kill",
                        ["set"] = "Yuki Fortress Set",
                        ["rewards"] = {
                            ["essence"] = 40,
                            ["chestMeter"] = 79,
                            ["exp"] = 8850000,
                            ["cash"] = 51000
                        },
                        ["rewardsText"] = "8.85 Mi EXP | Skull Hub",
                        ["difficulty"] = 3,
                        ["title"] = "Defeat",
                        ["level"] = 430,
                        ["grade"] = localPlayer.ReplicatedData.grade.Value,
                        ["subtitle"] = "a Curse User"
                    }
    
                    pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(ohTable1)
                    end)
    
                    task.wait(1)
    
                    local questData = localPlayer:FindFirstChild("ReplicatedTempData") and localPlayer.ReplicatedTempData:FindFirstChild("quest")
                    if not questData then
                        pcall(function()
                            game:GetService("ReplicatedStorage").Remotes.Server.Data.TakeQuest:InvokeServer(ohTable1)
                        end)
                    end
    
                    local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                    local questMarker = localPlayer.PlayerGui:WaitForChild("QuestMarker")
                    local adornee = questMarker.Adornee
    
                    if adornee and adornee:IsA("BasePart") then
                        humanoidRootPart.CFrame = adornee.CFrame
                    end
    
                    task.wait(getgenv().WaitTime)
                    processing = false
                end
            end)
        else
            getgenv().AutoFarm1 = false
        end
    end,
})

local Divider = ma:CreateDivider()

local originalCooldown = nil
local agod = ma:CreateToggle({
    Name = "God Mod",
    CurrentValue = false,
    Flag = "agodf",
    Callback = function(Value)
        local skillName = "Infinity: Mugen"
        local skill = game:GetService("ReplicatedStorage").Skills:FindFirstChild(skillName)

        if skill then
            if Value then
                originalCooldown = skill.Cooldown.Value
                skill.Cooldown.Value = 0
                getgenv().GodMode = true
                while getgenv().GodMode do
                    local selectedSkill = game:GetService("ReplicatedStorage").Skills:FindFirstChild(skillName)
                    if selectedSkill then
                        game:GetService("ReplicatedStorage").Remotes.Server.Combat.Skill:FireServer(skillName)
                    end
                    wait(1)
                end
            else
                if originalCooldown then
                    skill.Cooldown.Value = originalCooldown
                end
                getgenv().GodMode = false
            end
        end
    end,
})

local acollect = ma:CreateToggle({
    Name = "Auto Collect Chest",
    CurrentValue = false,
    Flag = "acccc",
    Callback = function(Value)
        getgenv().loot = Value
    end,
})

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().loot then
        checkLootAndChest()
    end
end)

local apromote = ma:CreateToggle({
    Name = "Auto Promote",
    CurrentValue = false,
    Flag = "apromotef",
    Callback = function(Value)
        if Value then
            getgenv().instantPromote = true
            task.spawn(function()
                while getgenv().instantPromote do
                    task.wait(0.1)
                    local ohString1 = "Clan Head Jujutsu High"
                    local ohString2 = "Promote"
                    
                    pcall(function()
                        game:GetService("ReplicatedStorage").Remotes.Server.Dialogue.GetResponse:InvokeServer(ohString1, ohString2)
                    end)
                end
            end)
        else
            getgenv().instantPromote = false
        end
    end,
})

local Section = ma:CreateSection("Hit Stack")

getgenv().stackm1 = false

local hitStack = 150
local cooldownTime = 0.1

local function calcularDistancia(cframe1, cframe2)
    return (cframe1.Position - cframe2.Position).magnitude
end

local HsSlider = ma:CreateSlider({
    Name = "Hit Amount",
    Range = {10, 1000},
    Increment = 1,
    Suffix = "M1",
    CurrentValue = hitStack,
    Flag = "Sliderm1",
    Callback = function(Value)
        hitStack = Value
    end,
})

local CoodSlider = ma:CreateSlider({
    Name = "Stack Cooldown",
    Range = {0.1, 2},
    Increment = 0.1,
    Suffix = "Secs",
    CurrentValue = cooldownTime,
    Flag = "Sliderm1",
    Callback = function(Value)
        cooldownTime = Value
    end,
})

local astackm1 = ma:CreateToggle({
    Name = "Stack M1",
    CurrentValue = false,
    Flag = "am1m1",
    Callback = function(Value)
        getgenv().stackm1 = Value

    if getgenv().stackm1 then
        task.spawn(function()
            local localPlayer = game.Players.LocalPlayer
            local jogador = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

            if not jogador then
                return
            end

            while getgenv().stackm1 do
                local npcsDentroDoAlcance = {}

                for _, mob in ipairs(workspace.Objects.Mobs:GetChildren()) do
                    local humanoidRootPart = mob:FindFirstChild("HumanoidRootPart")
                    local humanoid = mob:FindFirstChild("Humanoid")

                    if humanoidRootPart and humanoid and calcularDistancia(jogador.CFrame, humanoidRootPart.CFrame) < 100 then
                        table.insert(npcsDentroDoAlcance, humanoid)
                    end
                end

                if #npcsDentroDoAlcance == 0 then
                    wait(0.5)
                else
                    local args = { [1] = 5, [2] = npcsDentroDoAlcance }
                    local combatRemote = game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Combat"):WaitForChild("M1")
                    
                    combatRemote:FireServer(unpack(args))
                    wait(0.2)

                    for _ = 1, hitStack do
                        combatRemote:FireServer(unpack(args))
                    end
                    wait(cooldownTime)
                end
            end

        end)
    end
    end,
})

local Section = ma:CreateSection("Kill Aura")

local ainstak = ma:CreateToggle({
    Name = "Instant Kill Mob",
    CurrentValue = false,
    Flag = "ainstaki",
    Callback = function(Value)
        if Value then
            getgenv().instakill = true
            task.spawn(function()
                while getgenv().instakill do
                    task.wait(0.1)
                    local player = game:GetService("Players").LocalPlayer
                    local character = player.Character
                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        task.wait(0.1)  
                    else
                        for _, mob in pairs(game:GetService("Workspace").Objects.Mobs:GetChildren()) do
                            local mobHead = mob:FindFirstChild("Head")
                            local mobHRP = mob:FindFirstChild("HumanoidRootPart")
                            if mobHead and mobHRP then
                                local distance = (mobHRP.Position - character.HumanoidRootPart.Position).Magnitude
                                if distance <= 100 then
                                    pcall(function()
                                        mobHead:Destroy()
                                    end)
                                end
                            end
                        end
                    end
                end
            end)
        else
            getgenv().instakill = false
        end
    end,
})

local Section = ma:CreateSection("Kill Aura")

getgenv().Bring = false
local distanciaLimite = 100
local distanciaMinima = 5

local DistanciaMaxSlider = ma:CreateSlider({
    Name = "Max Bring Distance",
    Range = {30, 300},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = distanciaLimite,
    Flag = "Slider1fsdf",
    Callback = function(Value)
        distanciaLimite = Value
    end,
})

local DistanciaMinSlider = ma:CreateSlider({
    Name = "Distance From Player",
    Range = {1, 50},
    Increment = 1,
    Suffix = "studs",
    CurrentValue = distanciaMinima,
    Flag = "Slider1fsdf",
    Callback = function(Value)
        distanciaMinima = Value
    end,
})

local bmtoggle = ma:CreateToggle({
    Name = "Bring Mobs",
    CurrentValue = false,
    Flag = "abms",
    Callback = function(Value)
        getgenv().Bring = Value
    end,
})

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().Bring then
        local localPlayer = game.Players.LocalPlayer
        local jogador = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart")

        if jogador then
            for _, mob in pairs(workspace.Objects.Mobs:GetChildren()) do
                if mob:FindFirstChild("HumanoidRootPart") then
                    local distancia = (mob.HumanoidRootPart.Position - jogador.Position).magnitude
                    if distancia < distanciaLimite then
                        mob.HumanoidRootPart.CanCollide = false
                        local direcao = (mob.HumanoidRootPart.Position - jogador.Position).unit
                        local novaPosicao = jogador.Position + direcao * distanciaMinima
                        mob.HumanoidRootPart.CFrame = CFrame.new(novaPosicao)
                    end
                end
            end
        end
    end
end)

local Divider = misc:CreateDivider()

local acollecttalis = misc:CreateToggle({
    Name = "Auto Collect Talisman",
    CurrentValue = false,
    Flag = "accccrtalis",
    Callback = function(Value)
        getgenv().autotalisma = Value
        if getgenv().autotalisma then
            teleportToNextItem() 
        end
    end,
})

local antiafkbut = misc:CreateToggle({
    Name = "Anti Idle",
    CurrentValue = true,
    Flag = "AntiAFKFlag",
    Callback = function()
        local vu = game:GetService("VirtualUser")
        repeat wait() until game:IsLoaded() 
        game:GetService("Players").LocalPlayer.Idled:connect(function()
        game:GetService("VirtualUser"):ClickButton2(Vector2.new())
        vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        wait(1)
        vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
        end)
    end,
})

local Section = misc:CreateSection("Skills")

local skillsFolder = game:GetService("ReplicatedStorage").Skills
local oldCooldownValues = {}

local nocdff = misc:CreateToggle({
    Name = "No Cooldown",
    CurrentValue = false,
    Flag = "ncdflag",
    Callback = function(Value)
        if Value then
            for _, skill in pairs(skillsFolder:GetChildren()) do
                if skill:IsA("Folder") and skill:FindFirstChild("Cooldown") then
                    local cooldownValue = skill.Cooldown
                    if cooldownValue:IsA("NumberValue") then
                        oldCooldownValues[skill.Name] = cooldownValue.Value
                        cooldownValue.Value = 0
                    end
                end
            end
        else
            for skillName, oldValue in pairs(oldCooldownValues) do
                local skill = skillsFolder:FindFirstChild(skillName)
                if skill and skill:FindFirstChild("Cooldown") then
                    local cooldownValue = skill.Cooldown
                    if cooldownValue:IsA("NumberValue") then
                        cooldownValue.Value = oldValue
                    end
                end
            end
        end
    end,
})

local Section = misc:CreateSection("Innates")

local i1Label = misc:CreateLabel("Innate 1: "..tostring(game:GetService("Players").LocalPlayer.ReplicatedData.innates["1"].Value), 137212456917215)
local i2Label = misc:CreateLabel("Innate 2: "..tostring(game:GetService("Players").LocalPlayer.ReplicatedData.innates["2"].Value), 137212456917215)

spawn(function()
    while wait(0.001) do  
        local value = game:GetService("Players").LocalPlayer.ReplicatedData.innates["1"].Value
        i1Label:Set("Innate 1: "..tostring(value), 137212456917215)
    end
end)

spawn(function()
    while wait(0.001) do  
        local value = game:GetService("Players").LocalPlayer.ReplicatedData.innates["2"].Value
        i2Label:Set("Innate 2: "..tostring(value), 137212456917215)
    end
end)

local i1Button = misc:CreateButton({
    Name = "Spin Innate 1",
    Callback = function()
        local args = {
            [1] = 1
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("InnateSpin"):InvokeServer(unpack(args))
    end,
})

local i2Button = misc:CreateButton({
    Name = "Spin Innate 2",
    Callback = function()
        local args = {
            [1] = 2
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Server"):WaitForChild("Data"):WaitForChild("InnateSpin"):InvokeServer(unpack(args))
    end,
})

local Section = misc:CreateSection("Server")

local Svhopbut = misc:CreateButton({
    Name = "Server Hop",
    Callback = function()
        Teleport()
    end,
})

local Svhopbut2 = misc:CreateButton({
    Name = "Hop To Least Players Server",
    Callback = function()
        Teleport1()
    end,
})




--UiSettings
local Section = setting:CreateSection("UI Setting")
local themes = setting:CreateDropdown({
   Name = "🎨 Select Theme",
   Options = {
      "🌟 Default", 
      "✨ Amber Glow", 
      "💜 Amethyst", 
      "🌸 Bloom", 
      "🌌 Dark Blue", 
      "🍃 Green", 
      "🌞 Light", 
      "🌊 Ocean", 
      "🌿 Serenity"
   },
   CurrentOption = {""},
   MultipleOptions = false,
   Flag = "themes",
   Callback = function(Options)
         local selectedTheme = Options[1]
         if selectedTheme == "🌟 Default" then
            Window.ModifyTheme('Default')
         elseif selectedTheme == "✨ Amber Glow" then
            Window.ModifyTheme('AmberGlow')
         elseif selectedTheme == "💜 Amethyst" then
            Window.ModifyTheme('Amethyst')
         elseif selectedTheme == "🌸 Bloom" then
            Window.ModifyTheme('Bloom')
         elseif selectedTheme == "🌌 Dark Blue" then
            Window.ModifyTheme('DarkBlue')
         elseif selectedTheme == "🍃 Green" then
            Window.ModifyTheme('Green')
         elseif selectedTheme == "🌞 Light" then
            Window.ModifyTheme('Light')
         elseif selectedTheme == "🌊 Ocean" then
            Window.ModifyTheme('Ocean')
         elseif selectedTheme == "🌿 Serenity" then
            Window.ModifyTheme('Serenity')
         end
   end,
})

--Notification
Rayfield:Notify({
    Title = "Credit",
    Content = "Script has been coded by hungquan99",
    Duration = 5,
    Image = 137212456917215,
})

Rayfield:Notify({
    Title = "Skull Hub",
    Content = "Script has been loaded successfully!",
    Duration = 5,
    Image = 137212456917215,
})
